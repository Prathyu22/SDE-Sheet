//https://leetcode.com/problems/palindrome-partitioning/
/*

Palindrome Partitioning


Problem Statement: You are given a string s, partition it in such a way that every substring is a palindrome. Return all such palindromic partitions of s.

Note: A palindrome string is a string that reads the same backward as forward.

Examples:

Example 1:

Input: s = “aab”

Output: [ ["a","a","b"], ["aa","b"] ]	

Explanation: The first  answer is generated by  making three partitions. The second answer is generated by making two partitions.
 

Example 2:

Input: s = “aabb”

Output: [ [“a”,”a”,”b”,”b”], [“aa”,”bb”], [“a”,”a”,”bb”], [“aa”,”b”,”b”] ] 

*/

class Solution {
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> result; // This is the list of list of strings.
        vector<string> ans; // This is the list of strings which is the list in the result list.
        
        func(s,0,result,ans);
        return result;
    }
    
    //func description.
    void func(string s, int index, vector<vector<string>>& result, vector<string>& ans)
    {
        //base case.
        if(index == s.size())
        {
            result.push_back(ans);
            return;
        }
        
        //recursive case.
        for(int i=index; i<s.size(); i++)
        {
            if(isPalindrome(s,index,i))
            {
                ans.push_back(s.substr(index, i-index+1));
                func(s, i+1, result, ans);
                ans.pop_back();
            }
        }
    }
    
    //isPalindrome function description.
    bool isPalindrome(string s, int start, int end)
    {
        while(start <= end)
        {
            if(s[start++] != s[end--])
                return false;
        }
        return true;
    }
};